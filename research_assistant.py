# -*- coding: utf-8 -*-
"""research_assistant.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1593pemFPEtLpTu0AFntgVBA7Ci3WuZpf
"""

# Install necessary libraries
!pip install requests
!pip install scikit-learn
!pip install gensim
!pip install gradio

!pip install sumy

import warnings
warnings.filterwarnings("ignore", category=UserWarning, module="transformers")

import numpy, scipy, gensim, sklearn, gradio
print("numpy:", numpy.__version__)
print("scipy:", scipy.__version__)
print("gensim:", gensim.__version__)
print("sklearn:", sklearn.__version__)
import gradio as gr
print("gradio:", gr.__version__)

# ===============================
# Hugging Face ArXiv Summarizer
# Fully ready for backend / deployment
# ===============================

import requests
import xml.etree.ElementTree as ET
from transformers import pipeline, AutoTokenizer, logging as hf_logging



# -------------------------------
# 1Ô∏è‚É£ Hugging Face login
# -------------------------------
import os
from huggingface_hub import login

hf_token = os.getenv("HF_TOKEN")  # Read token from environment variable
if hf_token:
    login(token=hf_token)
else:
    print("‚ö†Ô∏è Warning: HF_TOKEN not found. Some features may not work.")

# -------------------------------
# 2Ô∏è‚É£ Suppress Hugging Face warnings
# -------------------------------
hf_logging.set_verbosity_error()  # disables max_length and token warnings

# -------------------------------
# 3Ô∏è‚É£ Load summarization model
# -------------------------------
MODEL_NAME = "facebook/bart-large-cnn"
tokenizer = AutoTokenizer.from_pretrained(MODEL_NAME)
summarizer = pipeline("summarization", model=MODEL_NAME)

# -------------------------------
# 4Ô∏è‚É£ Summarization function
# -------------------------------
def summarize_abstract(text, target_words=90, skip_threshold=50):
    """
    Summarize an abstract unless it's very short (<skip_threshold words).
    Token-aware max_length to avoid warnings.
    """
    if len(text.split()) < skip_threshold:
        return text  # skip short abstracts

    target_tokens = int(target_words * 1.5)
    input_tokens = len(tokenizer.encode(text, truncation=False))

    max_tokens = min(target_tokens + 20, max(2, input_tokens * 2))
    min_tokens = int(target_words * 0.8)

    try:
        summary = summarizer(
            text,
            max_length=max_tokens,
            min_length=min_tokens,
            do_sample=False
        )
        return summary[0]['summary_text']
    except Exception as e:
        print(f"Summarization failed: {e}")
        return text

# -------------------------------
# 5Ô∏è‚É£ Fetch and summarize arXiv papers
# -------------------------------
def fetch_and_summarize_arxiv(query, max_results=7, summary_words=90):
    """
    Fetch top N papers from arXiv and summarize abstracts.
    Short abstracts (<50 words) are returned as-is.
    Returns a list of dicts: title, authors, link, summary.
    """
    url = f"http://export.arxiv.org/api/query?search_query=all:{query}&start=0&max_results={max_results}"

    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
    except Exception as e:
        raise Exception(f"arXiv API request failed: {e}")

    root = ET.fromstring(response.text)
    ns = {'atom': 'http://www.w3.org/2005/Atom'}

    papers = []
    for entry in root.findall('atom:entry', ns):
        title = entry.find('atom:title', ns).text.strip()
        authors = [a.find('atom:name', ns).text for a in entry.findall('atom:author', ns)]
        abstract = entry.find('atom:summary', ns).text.strip()
        link = entry.find('atom:id', ns).text

        summary_text = summarize_abstract(abstract, target_words=summary_words)

        papers.append({
            "title": title,
            "authors": authors,
            "link": link,
            "summary": summary_text
        })

    return papers

import gradio as gr
import time
import re

# ========== Premium Color Palette ========== #
BG_GRAD = "linear-gradient(120deg, #161a2b 0%, #293669 55%, #213059 100%)"
CARD_BG = "rgba(38, 42, 66, 0.98)"
ACCENT_BLUE = "#6db3fa"
ACCENT_MINT = "#4fe6d5"
ACCENT_GOLD = "#ffd166"
GLOW_VIOLET = "rgba(140,130,248,0.19)"
FONT_MAIN = "#f6fafe"
FONT_SUBTLE = "#ced3fa"

# ========== Highlight Keywords ========== #
def highlight_query(text, query):
    if not query or not text:
        return text
    pattern = re.compile(re.escape(query), re.IGNORECASE)
    return pattern.sub(lambda m: f"<mark class='arxiv-mark'>{m.group(0)}</mark>", text)

# ========== Enhanced Math Support for summaries ========== #
def enhance_math(text):
    # Wrap math delimiters for MathJax display (arXiv abstracts usually $..$, $$..$$)
    text = re.sub(r'(?<!\$)(\$(.+?)\$)(?!\$)', r'\\(\2\\)', text)  # inline math
    text = re.sub(r'(?<!\$)(\$\$(.+?)\$\$)(?!\$)', r'\\[\2\\]', text)  # display math
    return text

def get_mathjax_script():
    return """
    <script>
    window.MathJax = {
        tex: {inlineMath: [['$', '$'], ['\\(', '\\)']], displayMath: [['$$','$$'], ['\\[','\\]']]},
        svg: {fontCache: 'global'}
    };
    </script>
    <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-svg.js"></script>
    """

# ========== MAIN ArXiv Logic ========== #
def research_assistant(query, max_results=10):
    output = get_mathjax_script() + "<div class='arxiv-results'>"
    try:
        papers = fetch_and_summarize_arxiv(query, max_results=max_results, summary_words=90)
    except Exception as e:
        return output + f"<div class='arxiv-error'>Error fetching papers: {e}</div></div>"
    if not papers:
        return output + "<div class='arxiv-nopapers'>No papers found for this query.</div></div>"
    for i, p in enumerate(papers, 1):
        title = highlight_query(p['title'], query)
        authors = ", ".join(p['authors'])
        authors = highlight_query(authors, query)
        summary = enhance_math(p['summary']) if p['summary'] else "<em>No summary available.</em>"
        output += f"""
        <div class='arxiv-card arxiv-anim' style='animation-delay:{i*0.08:.2f}s'>
            <div class='arxiv-header'>
                <span class='arxiv-native-icon'>üìÑ</span>
                <h3 class='arxiv-title'>{i}. {title}</h3>
            </div>
            <div class='arxiv-authors'>üßë‚Äçüî¨ {authors}</div>
            <details class='arxiv-summary'>
                <summary><span class='arxiv-summary-label'>üìù Summary</span></summary>
                <div class='arxiv-summarybox'>{summary}</div>
            </details>
            <a href="{p['link']}" target="_blank" class='arxiv-link'>üîó Read full paper</a>
        </div>
        """
    output += "</div>"
    output += """
    <script>
    if (window.MathJax) { MathJax.typesetPromise(); }
    </script>
    """
    return output

# ========== Landing/Quote/Fact Just Below Search ==========
def get_quote_fact(query_text):
    # Only show if textbox empty
    return "" if query_text else """
    <div class='arxiv-quote-box'>
        <div class='arxiv-quote'>
            "Research is formalized curiosity. It is poking and prying with a purpose."<br>
            <span style='font-size:0.97em;color:#ffd166;'>‚ÄîZora Neale Hurston</span>
        </div>
        <div class='arxiv-fact'>
            Did you know? <b>ArXiv hosts over 2 million research papers.</b><br>
            <span style='font-size:0.95em;color:#6db3fa;'>Explore quantum physics, cancer genomics, ML, astrophysics, and beyond.</span>
        </div>
        <div class='arxiv-extra-shapes'>
            <span class='shape shape-sm' style='background:#ffd166; animation-delay:.2s;'>œÄ</span>
            <span class='shape shape-xs' style='background:#6db3fa; animation-delay:.5s;'>‚àë</span>
            <span class='shape shape-mint' style='background:#4fe6d5; animation-delay:.8s;'>‚à´</span>
            <span class='shape shape-molecule' style='background:#4fe6d5; animation-delay:1.3s;'>üß¨</span>
        </div>
    </div>
    """

# ========== Glassmorphism + Reader-optimized CSS ==========
css = f"""
body, .gradio-container {{
    background:{BG_GRAD} !important;
    color:{FONT_MAIN};
    min-height:100vh;
}}
.arxiv-hero {{
    max-width:50em; width:96vw; margin:0 auto 2em auto; position:relative;
    text-align:center; padding-bottom:1em;
}}
.arxiv-shapes {{
    position:absolute; left:0; top:0; width:100vw; height:10em; z-index:0;
}}
.arxiv-blobs {{
    border-radius:48% 52% 50% 50%; opacity:0.22; position:absolute;
}}
.arxiv-blobs.b1 {{ left:7vw; width:9em; height:3em; background:#ffd166; animation: float 4s infinite alternate; top:1.5em; }}
.arxiv-blobs.b2 {{ left:56vw; width:13em; height:3.1em; top:2.3em; background:#6db3fa; animation: float 3.2s infinite alternate; }}
.arxiv-blobs.b3 {{ left:38vw; width:8em; height:2.7em;top:1.1em; background:#4fe6d5;animation: float 5s infinite alternate;}}
@keyframes float {{
    from {{ transform:translateY(0); }}
    40% {{ transform:translateY(-1.3em); }}
    100% {{ transform:translateY(0); }}
}}
.arxiv-math-icons {{
    margin-top:2.4em;
    display:flex;
    justify-content:center;
    gap:2.2em;
    font-size:2.1em;
    opacity:0.82;
    animation: fadeInText 2.1s ease-in;
}}
.arxiv-math-icons span {{
    animation: iconAnim 3.3s infinite alternate;
}}
@keyframes iconAnim {{
    from {{ transform:scale(1); }}
    50% {{ transform:scale(1.12) rotate(-7deg); }}
    to {{ transform:scale(1); }}
}}
.arxiv-welcome {{
    font-size:1.31em; font-weight:800; color:{FONT_MAIN};
    text-shadow:0 0.12em 0.52em {GLOW_VIOLET};
    margin-bottom:.8em;margin-top:.9em;
    animation: fadeInText 1.7s ease-in;
}}
@keyframes fadeInText {{
    from {{ opacity:0; transform:translateY(20px); }}
    to {{ opacity:1; transform:translateY(0); }}
}}
.arxiv-quote-box {{
    max-width:39em; margin:1.2em auto .7em auto; text-align:center; position:relative;
    z-index:5; animation: fadeInText 1.2s;
}}
.arxiv-quote {{
    color:{ACCENT_GOLD}; font-size:1.15em; text-shadow:0 0.18em 0.46em #222;
    font-style:italic; opacity:0.92; margin-bottom:.35em;
}}
.arxiv-fact {{
    color:{ACCENT_BLUE}; font-size:1.02em;
    margin-top:.2em;
    font-weight:700; margin-bottom:.3em;
}}
.arxiv-extra-shapes {{
    margin-top: .44em;
    display:flex; gap:.6em; justify-content:center; opacity:.68;
}}
.shape {{
    display:inline-block; margin:0 .14em; color:#182a39; border-radius:50%;
    box-shadow:0 0.12em 1.2em #6db3fa22;
    animation: shapeBounce 1.6s infinite alternate cubic-bezier(.62,.43,.39,.81);
}}
.shape-sm {{ font-size:1.33em; width:1.3em; height:1.3em; }}
.shape-xs {{ font-size:1.09em; width:1.13em; height:1.13em; }}
.shape-mint {{ font-size:1.18em; width:1.16em; height:1.16em; }}
.shape-molecule {{ font-size:1.31em; width:1.25em; height:1.25em; }}
@keyframes shapeBounce {{
    0% {{ transform: translateY(0); }}
    50% {{ transform: translateY(-0.54em) scale(1.07); }}
    100% {{ transform: translateY(0); }}
}}
.arxiv-results {{
    display:flex; flex-direction:column;
    gap:1.35em; width:96vw; max-width:46em;
    margin:2em auto 7.5em auto;
}}
.arxiv-card {{
    background: {CARD_BG};
    border-radius: 1.09em;
    box-shadow: 0 0.48em 2.2em {GLOW_VIOLET};
    padding: 1.6em 1.48em 1.22em 1.7em;
    border-left: 0.26em solid {ACCENT_MINT};
    transition: box-shadow .18s, transform .17s;
    margin-bottom:.79em;
}}
.arxiv-card:hover {{
    box-shadow:0 1.9em 5.8em {ACCENT_MINT};
    transform:scale(1.018);
    border-left: 0.26em solid {ACCENT_BLUE};
}}
.arxiv-header {{
    display:flex; align-items:center; gap:1.18em; margin-bottom:0.42em;
}}
.arxiv-native-icon {{
    font-size:2.07em; padding-right:0.19em; opacity:0.94;
}}
.arxiv-title {{
    font-size:1.18em; font-weight:900; color:{ACCENT_BLUE};
    margin:0; letter-spacing:.01em;
    text-shadow:0 0.06em 0.16em {GLOW_VIOLET};
    transition: color 0.17s;
}}
.arxiv-title:hover {{ color:{ACCENT_GOLD}; }}
.arxiv-authors {{
    font-size:1.11em; font-style:italic; color:{ACCENT_GOLD};
    margin-bottom:1.18em; max-width:90vw; word-break:break-word;
}}
.arxiv-summary {{ font-size:1.16em; }}
.arxiv-summary-label {{
    color:{ACCENT_MINT}; font-weight:700; font-size:1.05em;
    text-shadow:0 0.02em 0.13em {GLOW_VIOLET};
}}
.arxiv-summarybox {{
    margin:.92em 0 0 0;
    font-size:1.15em;
    font-family: 'JetBrains Mono', 'Noto Sans Math', 'Consolas', monospace, 'Noto Sans', 'Segoe UI', sans-serif;
    background:rgba(38,39,67,0.94);
    color:{FONT_MAIN};
    border-radius:.44em;
    font-weight:540;
    line-height:1.67;
    padding:1.1em 1.25em;
    box-shadow:0 0.09em 0.9em {GLOW_VIOLET};
    overflow-x:auto;
}}
.arxiv-link {{
    color:{ACCENT_MINT}; font-weight:800; font-size:1.09em;
    text-decoration:none; margin-top:0.64em; display:inline-block; transition:color .13s;
}}
.arxiv-link:hover {{ color:{ACCENT_BLUE}; text-decoration:underline; }}
.arxiv-mark {{
    background:rgba(79,230,213,0.13);
    border-radius:0.23em;
    font-weight:800;
    color:{ACCENT_MINT};
    padding:0 0.19em;
}}
.arxiv-anim {{
    opacity:0; transform:translateY(32px);
    animation:fadeSlide .99s cubic-bezier(.25,.46,.45,.94) forwards;
}}
@keyframes fadeSlide {{ to {{ opacity:1; transform:translateY(0); }} }}
.arxiv-error {{ color:{ACCENT_GOLD}; text-align:center; padding:2em; font-weight:bold; font-size:1.1em; }}
.arxiv-nopapers {{
    text-align:center; color:{ACCENT_BLUE};
    padding:2em; font-size:1.15em;
}}
.loader-spinner {{
    border:0.19em solid {ACCENT_MINT};
    border-top: 0.19em solid {ACCENT_GOLD};
    border-radius:50%; width:2em; height:2em;
    animation:spin .92s linear infinite;
    display:inline-block; margin-right:.53em;
    background:transparent;
}}
@keyframes spin {{ 0% {{transform:rotate(0deg);}} 100% {{transform:rotate(360deg);}} }}
.arxiv-footer {{
    position:fixed; left:0; right:0; bottom:0; width:100vw;
    background:linear-gradient(90deg,{CARD_BG} 80%,{ACCENT_MINT} 100%);
    color:#fff; text-align:center; font-weight:900; font-size:1.13em;
    padding:1.09em 0 0.38em 0; z-index:99999; box-shadow:0 -0.13em 0.29em {ACCENT_BLUE}17;
    letter-spacing:.025em;
}}
/* ---- SEARCH BAR ---- */
#search-input input {{
    background:{CARD_BG};
    color:{FONT_MAIN};
    border: 2px solid {ACCENT_MINT};
    border-radius:1em;
    font-size:1.11em;
    padding:1.1em 1.2em;
    box-shadow:0 0.13em 0.54em {GLOW_VIOLET} inset;
    transition: box-shadow .18s, border .18s;
}}
#search-input input:focus {{
    outline: none;
    border:2.5px solid {ACCENT_BLUE};
    box-shadow:0 0.18em 0.81em {ACCENT_BLUE} inset;
}}
#search-input::placeholder, #search-input input::placeholder {{
    color:{FONT_SUBTLE};
    opacity:0.92;
}}
"""

with gr.Blocks(css=css, title="ArXiv Research Summarizer") as demo:
    gr.HTML(f"""
    <div class='arxiv-hero'>
        <div class='arxiv-shapes'>
            <div class='arxiv-blobs b1'></div>
            <div class='arxiv-blobs b2'></div>
            <div class='arxiv-blobs b3'></div>
        </div>
        <div class='arxiv-math-icons'>
            <span>œÄ</span>
            <span>‚à´</span>
            <span>Œ£</span>
            <span>üß¨</span>
            <span>‚öõÔ∏è</span>
        </div>
        <div class='arxiv-welcome'>
            Welcome to <span style='color:#6db3fa;'>ArXiv Research Summarizer</span>.<br>
            <span style='font-weight:600;color:#4fe6d5;'>Search major research topics, get crisp summaries, and unlock knowledge instantly.</span><br>
            <span style='font-size:1.03em;color:#ffd166;'>Created by Shah Ahrar</span>
        </div>
    </div>
    """)
    with gr.Row():
        query = gr.Textbox(
            placeholder="üîé Type any research topic (e.g. quantum entanglement, neural net, cosmic cold spot)",
            show_label=False,
            scale=4,
            elem_id="search-input",
            max_lines=1
        )
        search_btn = gr.Button("Search", variant="primary", scale=1)
    quote_fact_html = gr.HTML(get_quote_fact(""))  # Sits BELOW search; disappears as you type
    output_box = gr.HTML()

    def run_search(qtext):
        return "", f"<div style='text-align:center; margin-top:2em;'><span class='loader-spinner'></span> <span style='font-size:1.11em;color:#4fe6d5;'>Searching arXiv...</span></div>"

    def fetch_results(qtext):
        if not qtext or qtext.strip() == "":
            return get_quote_fact(qtext), "<div class='arxiv-error'>Please enter a search term!</div>"
        time.sleep(0.92)
        results = research_assistant(qtext)
        return "", results

    def restore_quote_fact(qtext):
        return get_quote_fact(qtext), ""

    query.change(fn=restore_quote_fact, inputs=query, outputs=[quote_fact_html, output_box])
    search_btn.click(fn=run_search, inputs=query, outputs=[quote_fact_html, output_box]).then(
        fn=fetch_results, inputs=query, outputs=[quote_fact_html, output_box]
    )

    gr.HTML("<div class='arxiv-footer'>Created by Shah Ahrar &mdash; Powered by Gradio &amp; Hugging Face üöÄ</div>")

demo.launch(share=True)
